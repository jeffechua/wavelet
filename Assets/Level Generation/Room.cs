using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System;


public abstract class RoomObject : MonoBehaviour {
	Room _room;
	protected Room room {
		get {
			if (!_room) {
				_room = transform.root.GetComponent<Room>();
			}
			return _room;
		}
	}
	public void OverrideRoom(Room newRoom) {
		_room = newRoom;
	}
}

public enum BorderType { Closed = 0, Free = 1, Absorb = 2 }

[Serializable]
public struct BorderParams {
	public BorderType type;
	public float thickness;
	public bool door;
}

public class Room : MonoBehaviour {

	public string spec;
	public Vector2 size;
	public BorderParams north;
	public BorderParams east;
	public BorderParams south;
	public BorderParams west;

	public GameObject waveEngineTemplate;
	public GameObject borderTemplate;
	public WaveEngine waveEngine; // Autogenerated, do not assign.
	public float timeScale;

	public void ResetRoom() {
		gameObject.BroadcastMessage("Reset", SendMessageOptions.DontRequireReceiver);
	}

	public void ReloadRoom() {

		if (spec == "") return;

		// Destroy all instantiated objects (except WavePlane)
		for (int i=0; i< transform.childCount; i++)
			Destroy(transform.GetChild(i).gameObject);

		// Instance wave engine and plane
		waveEngine = Instantiate(waveEngineTemplate, transform).GetComponent<WaveEngine>();

		// Instance room borders
		Instantiate(borderTemplate, transform).GetComponent<Border>().Draw(south, 0);
		Instantiate(borderTemplate, transform).GetComponent<Border>().Draw(east, 1);
		Instantiate(borderTemplate, transform).GetComponent<Border>().Draw(north, 2);
		Instantiate(borderTemplate, transform).GetComponent<Border>().Draw(west, 3);

		// Instance level objects
		string[] lines = spec.Split(';');
		foreach (string line in lines) {
			string[] words = line.Split(',');
			if (words.Length != 3)
				throw new ArgumentException("Invalid line format in room spec:\n" + line);
			GameObject template = (GameObject)Resources.Load("Enemy/" + words[0].Trim());
			if (!template)
				throw new ArgumentException("Enemy not found in room spec:\n" + line);
			if (!float.TryParse(words[1], out float x) || !float.TryParse(words[2], out float y))
				throw new ArgumentException("Invalid position in room spec:\n" + line);
			Instantiate(template, new Vector3(x, y, 0), Quaternion.identity, transform);
		}
	}

	public void Awake() {
		ReloadRoom();
	}

	private void Update() {

		if (Input.GetKeyDown(KeyCode.R)) {
			if (Input.GetKey(KeyCode.LeftShift) || Input.GetKey(KeyCode.RightShift))
				ResetRoom();
			else
				ReloadRoom();
		}

		// Couple player hitbox if overlapping
		if (Player.instance == null)
			return;
		if (new Rect(waveEngine.transform.position - waveEngine.transform.localScale / 2, waveEngine.transform.transform.localScale).Contains(Player.instance.transform.position)) {
			Player.instance.GetComponent<HP>().OverrideRoom(this); // probably don't need to do this every frame
			Player.instance.GetComponent<DamageHitbox>().OverrideRoom(this); // probably don't need to do this every frame
		}

	}

}
